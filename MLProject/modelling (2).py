# -*- coding: utf-8 -*-
"""modelling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MiKQQktrVSo-tDTO5QF_lhGQSvKy3oIX
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install mlflow

import pandas as pd
import numpy as np
import mlflow
import mlflow.sklearn # Penting untuk autolog() Scikit-learn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression # Contoh model
from sklearn.ensemble import RandomForestClassifier # Contoh model lain
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
import os

PROCESSED_DATA_FOLDER_NAME = '/content/drive/MyDrive/MLOps/Membangun_model/telco_churn_preprocessing'
PATH_TO_PROCESSED_DATA = os.path.join('.', PROCESSED_DATA_FOLDER_NAME)

def load_processed_data(path):
    """
    Memuat data training dan testing yang sudah diproses.
    """
    print(f"Memuat data yang diproses dari: {path}")
    if not os.path.exists(path):
        print(f"Error: Direktori '{path}' tidak ditemukan.")
        print("Pastikan Anda telah menjalankan langkah preprocessing dan menyimpan data di lokasi ini.")
        return None, None, None, None

    try:
        X_train = pd.read_csv(os.path.join(path, 'X_train.csv'))
        X_test = pd.read_csv(os.path.join(path, 'X_test.csv'))
        y_train = pd.read_csv(os.path.join(path, 'y_train.csv')).squeeze()
        y_test = pd.read_csv(os.path.join(path, 'y_test.csv')).squeeze()
        print("Data yang diproses berhasil dimuat.")
        return X_train, X_test, y_train, y_test
    except FileNotFoundError as e:
        print(f"Error: File tidak ditemukan di '{path}'. Detail: {e}")
        print("Pastikan semua file (X_train.csv, X_test.csv, y_train.csv, y_test.csv) ada di direktori yang ditentukan.")
        return None, None, None, None


if __name__ == "__main__":
    print("--- Memulai Pelatihan Model Machine Learning ---")

    # 1. Aktifkan autolog MLflow untuk Scikit-learn
    mlflow.sklearn.autolog()

    # 2. Muat data yang sudah diproses
    X_train, X_test, y_train, y_test = load_processed_data(PATH_TO_PROCESSED_DATA)

    # Check if data was loaded successfully
    if X_train is None:
        print("\n--- Pelatihan Model Dibatalkan karena data tidak dapat dimuat. ---")
    else:
        # 3. Definisikan model
        model = LogisticRegression(random_state=42, solver='liblinear', max_iter=1000)

        # 4. Mulai MLflow run
        with mlflow.start_run():
            # 5. Latih model
            print("Melatih model...")
            model.fit(X_train, y_train)
            print("Model berhasil dilatih.")

            # 6. Evaluasi model (autolog sudah mencatat metrik dasar, tapi ini untuk konfirmasi)
            y_pred = model.predict(X_test)
            y_pred_proba = model.predict_proba(X_test)[:, 1]

            accuracy = accuracy_score(y_test, y_pred)
            precision = precision_score(y_test, y_pred)
            recall = recall_score(y_test, y_pred)
            f1 = f1_score(y_test, y_pred)
            roc_auc = roc_auc_score(y_test, y_pred_proba)

            print(f"Accuracy: {accuracy:.4f}")
            print(f"Precision: {precision:.4f}")
            print(f"Recall: {recall:.4f}")
            print(f"F1-Score: {f1:.4f}")
            print(f"ROC AUC: {roc_auc:.4f}")

        print("\n--- Pelatihan Model Selesai. Periksa MLflow UI untuk melihat hasilnya! ---")
