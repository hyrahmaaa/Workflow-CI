# Workflow-CI/.github/workflows/ci_retrain.yml

name: CI - Retrain ML Model # Nama workflow Anda

on:
  push:
    branches:
      - main # Ganti dengan nama branch utama Anda jika berbeda (misal: master)
    paths:
      - 'MLProject/modelling.py' # Trigger jika kode model berubah
      - 'MLProject/conda.yaml'   # Trigger jika lingkungan Conda berubah
      - 'MLProject/MLProject'    # Trigger jika konfigurasi project MLflow berubah
      - 'MLProject/telco_churn_preprocessing/**' # Trigger jika data preprocessing berubah
  workflow_dispatch: # Memungkinkan Anda menjalankan workflow secara manual dari UI GitHub

jobs:
  retrain_model:
    runs-on: ubuntu-latest # Runner yang akan menjalankan job

    permissions:
      contents: write # Diperlukan untuk push commit ke repo
      id-token: write # Diperlukan untuk beberapa integrasi (misal, OIDC)

    steps:
    - name: Checkout repository # Checkout kode dari repositori
      uses: actions/checkout@v4

    # Menggunakan action 'setup-python' untuk menginstal Python dasar
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9' # Pastikan versi ini cocok dengan yang di conda.yaml Anda

    # Menggunakan action 'conda-incubator/setup-miniconda' untuk setup Conda
    # Ini akan membuat dan mengaktifkan lingkungan dari conda.yaml Anda
    - name: Set up Conda Environment
      uses: conda-incubator/setup-miniconda@v2
      with:
        environment-file: MLProject/conda.yaml # Path ke file conda.yaml Anda
        activate-environment: mlproject-env # Nama environment dari conda.yaml Anda (harus sama dengan name di conda.yaml)
        auto-activate-base: false # Hindari aktivasi base environment secara otomatis

    - name: Install MLflow and DagsHub client # Instal pustaka di lingkungan yang aktif
      run: |
        # Pastikan Conda diinisialisasi untuk shell ini dan lingkungan diaktifkan
        source $(conda info --base)/etc/profile.d/conda.sh
        conda activate mlproject-env
        
        python -m pip install --upgrade pip
        # Instal versi spesifik untuk konsistensi
        pip install mlflow==3.1.0 dagshub==0.5.10

    - name: Configure DagsHub MLflow Tracking # Menyiapkan variabel lingkungan untuk DagsHub
      run: |
        echo "MLFLOW_TRACKING_URI=https://dagshub.com/hyrahmaaa/Workflow-CI.mlflow" >> $GITHUB_ENV # <--- GANTI USERNAME DAN REPO ANDA
        echo "MLFLOW_TRACKING_USERNAME=hyrahmaaa" >> $GITHUB_ENV # <--- GANTI USERNAME ANDA
        echo "MLFLOW_TRACKING_PASSWORD=${{ secrets.DAGSHUB_TOKEN }}" >> $GITHUB_ENV # <--- GUNAKAN GITHUB SECRET ANDA
        # Simpan nama repositori DagsHub Anda (sama dengan nama repo GitHub)
        echo "DAGSHUB_REPO_NAME=${{ github.event.repository.name }}" >> $GITHUB_ENV

    - name: Run MLflow Project (Model Retraining) # Menjalankan MLflow Project dan menangkap Run ID
      run: |
        # Pastikan Conda diinisialisasi untuk shell ini dan lingkungan diaktifkan
        source $(conda info --base)/etc/profile.d/conda.sh
        conda activate mlproject-env
        
        # Jalankan MLflow Project. Ini akan memanggil modelling.py dan mencatat run.
        # Tangkap RUN_ID yang dihasilkan oleh mlflow run. Ini adalah metode yang lebih robust.
        RUN_ID=$(mlflow run MLProject/ 2>&1 | grep "Running command" | grep -oP "run with ID '\K[^\']+" | tail -n 1)
        
        echo "MLFLOW_RUN_ID=$RUN_ID" >> $GITHUB_ENV # Simpan RUN_ID sebagai environment variable
        echo "MLflow run initiated with ID: $RUN_ID" # Pesan debugging
      env: # Pastikan variabel DagsHub juga tersedia di step ini
        MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
        MLFLOW_TRACKING_USERNAME: ${{ env.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ env.MLFLOW_TRACKING_PASSWORD }}
        
    - name: Upload Model Artifact to DagsHub # Langkah untuk mengunggah artefak ke DagsHub
      # Hanya jalankan ini jika MLflow_RUN_ID berhasil ditangkap
      if: env.MLFLOW_RUN_ID != ''
      run: |
        # Pastikan Conda diinisialisasi untuk shell ini dan lingkungan diaktifkan
        source $(conda info --base)/etc/profile.d/conda.sh
        conda activate mlproject-env
        
        # Pastikan dagshub terinstal di environment ini, meskipun sudah diinstal sebelumnya.
        # Ini untuk berjaga-jaga jika ada masalah dengan PATH atau aktivasi.
        pip install dagshub==0.5.10
        
        # Gunakan dagshub CLI untuk mengupload artefak model
        # Asumsi 'model' disimpan secara lokal di mlruns/0/<RUN_ID>/artifacts/model/
        python -m dagshub.cli.main artifact upload \
          --repo_url "https://dagshub.com/${{ env.MLFLOW_TRACKING_USERNAME }}/${{ env.DAGSHUB_REPO_NAME }}.git" \
          --run_id ${{ env.MLFLOW_RUN_ID }} \
          --path_on_dagshub "model" \
          --message "Model artifact from CI retraining ${{ env.MLFLOW_RUN_ID }}" \
          "mlruns/0/${{ env.MLFLOW_RUN_ID }}/artifacts/model" # <--- LOKASI ARTEFAK LOKAL
      env: # Pastikan variabel DagsHub juga tersedia di step ini
        MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
        MLFLOW_TRACKING_USERNAME: ${{ env.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ env.MLFLOW_TRACKING_PASSWORD }}

    - name: Commit processed data # Menyimpan kembali perubahan (termasuk folder mlruns/)
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git pull origin main --rebase # Ambil perubahan terbaru dari remote sebelum push

        git add . # Tambahkan semua file yang berubah/baru (termasuk mlruns/)

        git commit -m "Automated: Model retraining results updated" || true # Commit perubahan
        git push # Push perubahan ke remote
