# .github/workflows/ci_retrain.yml

name: CI - Retrain ML Model

on:
  push:
    branches:
      - main
    paths:
      - 'MLProject/modelling_tuning.py'
      - 'MLProject/conda.yaml'
      - 'MLProject/MLProject'
      - 'MLProject/requirements.txt'
      - 'MLProject/predict_model.py'
      - 'MLProject/Dockerfile'
      - 'MLProject/telco_churn_preprocessing/**'
  workflow_dispatch:

jobs:
  retrain_model:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      id-token: write # Dibutuhkan untuk DagsHub, dan mungkin nanti untuk OIDC

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        
    - name: Set up Conda Environment
      uses: conda-incubator/setup-miniconda@v2
      with:
        environment-file: MLProject/conda.yaml
        activate-environment: mlproject-env
        auto-activate-base: false

    - name: Install MLflow and DagsHub client
      run: |
        source "$(conda info --base)/etc/profile.d/conda.sh"
        conda activate mlproject-env
        
        python -m pip install --upgrade pip
        pip install mlflow==2.13.0 dagshub==0.5.10

        python -c "import dagshub; print('DagsHub version:', dagshub.__version__)"
        python -c "import mlflow; print('MLflow version:', mlflow.__version__)"

    - name: Configure DagsHub MLflow Tracking
      run: |
        echo "MLFLOW_TRACKING_URI=https://dagshub.com/hyrahmaaa/Workflow-CI.mlflow" >> "$GITHUB_ENV"
        echo "MLFLOW_TRACKING_USERNAME=hyrahmaaa" >> "$GITHUB_ENV"
        echo "MLFLOW_TRACKING_PASSWORD=${{ secrets.DAGSHUB_TOKEN }}" >> "$GITHUB_ENV"
        echo "DAGSHUB_REPO_NAME=${{ github.event.repository.name }}" >> "$GITHUB_ENV"

    - name: Run MLflow Project (Model Retraining)
      id: run_mlflow_project # ID untuk step ini agar outputnya bisa digunakan oleh step lain
      run: |
        set -e
        source "$(conda info --base)/etc/profile.d/conda.sh"
        conda activate mlproject-env

        # mkdir -p mlruns # MLflow seharusnya membuat ini sendiri sekarang, ini bisa dihapus
        
        echo "=== Executing mlflow run MLProject/ Directly ==="
        MLFLOW_FULL_OUTPUT=$(mlflow run MLProject/ 2>&1)
        echo "$MLFLOW_FULL_OUTPUT"

        RUN_ID=$(echo "$MLFLOW_FULL_OUTPUT" | grep -oP "run with ID '\K[^\']+" | tail -n 1)
        
        if [ -z "$RUN_ID" ]; then
          echo "Error: MLflow Run ID could not be extracted. MLflow run might have failed."
          exit 1
        fi
        
        echo "MLFLOW_RUN_ID=$RUN_ID" >> "$GITHUB_ENV"
        echo "MLflow run initiated with ID: $RUN_ID"
        echo "mlflow_run_id=$RUN_ID" >> "$GITHUB_OUTPUT" # Membuat output Run ID tersedia untuk step berikutnya
        
        echo "=== mlflow run command finished ==="
      env: # Variabel lingkungan hanya untuk step ini
        MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
        MLFLOW_TRACKING_USERNAME: ${{ env.MLFLOW_TRACKING_USERNAME }}
        MLFLOW_TRACKING_PASSWORD: ${{ env.MLFLOW_TRACKING_PASSWORD }}

    - name: Copy Model Artifact for Docker Build
      run: |
        MLFLOW_RUN_ID=${{ steps.run_mlflow_project.outputs.mlflow_run_id }}
        
        if [ -z "$MLFLOW_RUN_ID" ]; then
          echo "Error: MLFLOW_RUN_ID is empty. Cannot copy artifact."
          exit 1
        fi

        ARTIFACT_SOURCE_PATH="mlruns/0/$MLFLOW_RUN_ID/artifacts/best_logistic_regression_model_artifact"
        DESTINATION_PATH="MLProject/best_logistic_regression_model_artifact"

        echo "Copying artifact from $ARTIFACT_SOURCE_PATH to $DESTINATION_PATH"
        cp -r "$ARTIFACT_SOURCE_PATH" "$DESTINATION_PATH"
        echo "Artifact copied successfully."
      # Pastikan step ini hanya berjalan jika step mlflow project berhasil dan ID tidak kosong
      if: success() && steps.run_mlflow_project.outputs.mlflow_run_id != ''

    - name: Docker Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Get Docker Image Tag
      id: get_tag # ID untuk step ini agar outputnya bisa digunakan
      run: |
        REPO_NAME_DOCKER="${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DAGSHUB_REPO_NAME }}"
        MLFLOW_RUN_ID="${{ steps.run_mlflow_project.outputs.mlflow_run_id }}"
        
        TAGS="${REPO_NAME_DOCKER}:latest,${REPO_NAME_DOCKER}:${MLFLOW_RUN_ID}"
        echo "Docker image tags: $TAGS"
        echo "tags=$TAGS" >> "$GITHUB_OUTPUT" # Membuat tags tersedia untuk step berikutnya

    - name: Build and Push Docker Image
      uses: docker/build-and-push-action@v5
      with:
        context: ./MLProject # Lokasi Dockerfile dan build context
        push: true           # Aktifkan fitur push
        tags: ${{ steps.get_tag.outputs.tags }} # Menggunakan tags yang sudah kita buat

    - name: Commit processed data # Step ini untuk mengupdate Git jika ada perubahan di mlruns
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git pull origin main --rebase
        git add .
        git commit -m "Automated: Model retraining results updated" || true
        git push
